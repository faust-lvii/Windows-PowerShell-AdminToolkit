#Requires -Version 5.1
#Requires -RunAsAdministrator

<#
.SYNOPSIS
    Advanced PowerShell script for managing Windows Defender and antimalware configurations.

.DESCRIPTION
    This script provides comprehensive functionality to manage Windows Defender and antimalware settings
    across local or remote computers. Features include configuring Windows Defender settings, managing scan
    schedules, updating malware definitions, running scans, managing exclusions, and monitoring protection status.
    
    The script includes robust error handling, detailed logging, multiple output formats (Console, CSV, HTML, JSON),
    progress tracking, and remediation capabilities.

.PARAMETER ComputerName
    Specifies the computer(s) to manage. Default is the local computer.

.PARAMETER Credential
    Specifies the credential to use for remote connections.

.PARAMETER Action
    Specifies the action to perform. Valid values are:
    - GetStatus: Gets the current antimalware status (default)
    - ConfigureSettings: Configures Windows Defender settings
    - UpdateDefinitions: Updates malware definitions
    - StartScan: Starts a malware scan
    - ScheduleScan: Configures scan schedules
    - ManageExclusions: Manages scan exclusions
    - RemediateThreat: Remediates detected threats

.PARAMETER ScanType
    Specifies the type of scan to perform. Valid values are:
    - Quick: Performs a quick scan (default)
    - Full: Performs a full scan
    - Custom: Performs a custom scan

.PARAMETER ScanPath
    Specifies the path to scan when ScanType is Custom.

.PARAMETER ExclusionType
    Specifies the type of exclusion to manage. Valid values are:
    - Path: Excludes a file path
    - Extension: Excludes a file extension
    - Process: Excludes a process
    - IP: Excludes an IP address

.PARAMETER ExclusionAction
    Specifies the action to perform on exclusions. Valid values are:
    - Add: Adds an exclusion
    - Remove: Removes an exclusion
    - List: Lists current exclusions (default)

.PARAMETER ExclusionValue
    Specifies the value to exclude.

.PARAMETER ThreatID
    Specifies the threat ID to remediate.

.PARAMETER RemediationAction
    Specifies the remediation action. Valid values are:
    - Clean: Attempts to clean the threat
    - Quarantine: Quarantines the threat (default)
    - Remove: Removes the threat
    - Allow: Allows the threat

.PARAMETER OutputFormat
    Specifies the output format. Valid values are:
    - Console: Outputs to the console (default)
    - CSV: Outputs to a CSV file
    - HTML: Outputs to an HTML file
    - JSON: Outputs to a JSON file

.PARAMETER OutputPath
    Specifies the path for output files. Default is the current directory.

.PARAMETER LogFile
    Specifies the path to the log file. Default is "AntiMalware_Log.log" in the current directory.

.PARAMETER LogLevel
    Specifies the log level. Valid values are:
    - Info: Logs informational messages (default)
    - Warning: Logs warning messages
    - Error: Logs error messages
    - Debug: Logs debug messages

.PARAMETER Force
    Forces the action without prompting for confirmation.

.EXAMPLE
    PS> .\Manage-AntiMalware.ps1 -Action GetStatus
    
    Gets the current antimalware status of the local computer.

.EXAMPLE
    PS> .\Manage-AntiMalware.ps1 -Action StartScan -ScanType Quick
    
    Starts a quick scan on the local computer.

.EXAMPLE
    PS> .\Manage-AntiMalware.ps1 -Action UpdateDefinitions
    
    Updates malware definitions on the local computer.

.EXAMPLE
    PS> .\Manage-AntiMalware.ps1 -ComputerName Server01,Server02 -Action GetStatus -OutputFormat HTML -OutputPath C:\Reports
    
    Gets the antimalware status of Server01 and Server02 and outputs the result to an HTML file in C:\Reports.

.EXAMPLE
    PS> .\Manage-AntiMalware.ps1 -Action ManageExclusions -ExclusionType Path -ExclusionAction Add -ExclusionValue C:\ExcludedPath
    
    Adds C:\ExcludedPath to the scan exclusions.

.EXAMPLE
    PS> .\Manage-AntiMalware.ps1 -Action ConfigureSettings -RealtimeProtection $true -CloudProtection $true
    
    Enables real-time protection and cloud protection.

.EXAMPLE
    PS> .\Manage-AntiMalware.ps1 -Action RemediateThreat -ThreatID 2147519003 -RemediationAction Quarantine
    
    Quarantines the threat with ID 2147519003.

.NOTES
    Author: PowerShell Admin
    Version: 1.0
    Date: [Current Date]
    
    Requirements:
    - PowerShell 5.1 or higher
    - Administrator privileges
    - Windows Defender must be installed

.LINK
    https://docs.microsoft.com/en-us/powershell/module/defender/
#>

[CmdletBinding(DefaultParameterSetName='Status')]
param (
    [Parameter(Position=0)]
    [string[]]$ComputerName = $env:COMPUTERNAME,
    
    [Parameter()]
    [System.Management.Automation.PSCredential]
    [System.Management.Automation.Credential()]
    $Credential,
    
    [Parameter(Position=1)]
    [ValidateSet('GetStatus', 'ConfigureSettings', 'UpdateDefinitions', 'StartScan', 'ScheduleScan', 'ManageExclusions', 'RemediateThreat')]
    [string]$Action = 'GetStatus',
    
    [Parameter(ParameterSetName='Scan')]
    [ValidateSet('Quick', 'Full', 'Custom')]
    [string]$ScanType = 'Quick',
    
    [Parameter(ParameterSetName='Scan')]
    [string]$ScanPath,
    
    [Parameter(ParameterSetName='Exclusion')]
    [ValidateSet('Path', 'Extension', 'Process', 'IP')]
    [string]$ExclusionType,
    
    [Parameter(ParameterSetName='Exclusion')]
    [ValidateSet('Add', 'Remove', 'List')]
    [string]$ExclusionAction = 'List',
    
    [Parameter(ParameterSetName='Exclusion')]
    [string[]]$ExclusionValue,
    
    [Parameter(ParameterSetName='Remediation')]
    [string]$ThreatID,
    
    [Parameter(ParameterSetName='Remediation')]
    [ValidateSet('Clean', 'Quarantine', 'Remove', 'Allow')]
    [string]$RemediationAction = 'Quarantine',
    
    [Parameter(ParameterSetName='Configure')]
    [Parameter(ParameterSetName='Status')]
    [Parameter(ParameterSetName='Scan')]
    [Parameter(ParameterSetName='Exclusion')]
    [Parameter(ParameterSetName='Remediation')]
    [ValidateSet('Console', 'CSV', 'HTML', 'JSON')]
    [string]$OutputFormat = 'Console',
    
    [Parameter(ParameterSetName='Configure')]
    [Parameter(ParameterSetName='Status')]
    [Parameter(ParameterSetName='Scan')]
    [Parameter(ParameterSetName='Exclusion')]
    [Parameter(ParameterSetName='Remediation')]
    [string]$OutputPath = (Get-Location).Path,
    
    [Parameter()]
    [string]$LogFile = "AntiMalware_Log.log",
    
    [Parameter()]
    [ValidateSet('Info', 'Warning', 'Error', 'Debug')]
    [string]$LogLevel = 'Info',
    
    [Parameter(ParameterSetName='Configure')]
    [switch]$RealtimeProtection,
    
    [Parameter(ParameterSetName='Configure')]
    [switch]$CloudProtection,
    
    [Parameter(ParameterSetName='Configure')]
    [switch]$BehaviorMonitoring,
    
    [Parameter()]
    [switch]$Force
)

# Script Variables
$script:startTime = Get-Date
$script:totalComputers = $ComputerName.Count
$script:currentComputer = 0
$script:scriptVersion = "1.0"
$script:logFilePath = Join-Path -Path (Get-Location).Path -ChildPath $LogFile
$script:results = @()

# Region: Helper Functions

function Write-Log {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [string]$Message,
        
        [Parameter()]
        [ValidateSet('Info', 'Warning', 'Error', 'Debug')]
        [string]$Level = 'Info',
        
        [Parameter()]
        [switch]$NoConsole
    )
    
    # Only log if the current level is sufficient
    $levelValue = @{
        'Debug' = 0
        'Info' = 1
        'Warning' = 2
        'Error' = 3
    }
    
    if ($levelValue[$Level] -ge $levelValue[$LogLevel]) {
        $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        $logEntry = "[$timestamp] [$Level] $Message"
        
        # Write to log file
        try {
            Add-Content -Path $script:logFilePath -Value $logEntry -ErrorAction Stop
        }
        catch {
            Write-Error "Failed to write to log file: $_"
        }
        
        # Write to console with appropriate color if not suppressed
        if (-not $NoConsole) {
            $consoleColor = switch ($Level) {
                'Info'    { 'White' }
                'Warning' { 'Yellow' }
                'Error'   { 'Red' }
                'Debug'   { 'Gray' }
                default   { 'White' }
            }
            
            Write-Host $logEntry -ForegroundColor $consoleColor
        }
    }
}

function Show-Progress {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [string]$Activity,
        
        [Parameter()]
        [string]$Status,
        
        [Parameter()]
        [int]$PercentComplete,
        
        [Parameter()]
        [switch]$Completed
    )
    
    if ($Completed) {
        Write-Progress -Activity $Activity -Completed
    }
    else {
        Write-Progress -Activity $Activity -Status $Status -PercentComplete $PercentComplete
    }
}

function Test-Administrator {
    $currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

function Export-ResultsToFile {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [object[]]$Results,
        
        [Parameter(Mandatory=$true)]
        [string]$Format,
        
        [Parameter(Mandatory=$true)]
        [string]$Path,
        
        [Parameter(Mandatory=$true)]
        [string]$Action
    )
    
    $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
    $filename = "AntiMalware-${Action}-${timestamp}"
    
    try {
        switch ($Format) {
            'CSV' {
                $outputFile = Join-Path -Path $Path -ChildPath "$filename.csv"
                $Results | Export-Csv -Path $outputFile -NoTypeInformation -Force
                Write-Log "Results exported to CSV file: $outputFile" -Level Info
                return $outputFile
            }
            'HTML' {
                $outputFile = Join-Path -Path $Path -ChildPath "$filename.html"
                
                # Create HTML header with basic styling
                $htmlHeader = @"
<!DOCTYPE html>
<html>
<head>
<title>Antimalware Report - $Action</title>
<style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    h1 { color: #003366; }
    table { border-collapse: collapse; width: 100%; margin-top: 20px; }
    th { background-color: #003366; color: white; text-align: left; padding: 8px; }
    td { border: 1px solid #ddd; padding: 8px; }
    tr:nth-child(even) { background-color: #f2f2f2; }
    .footer { margin-top: 20px; font-size: 0.8em; color: #666; }
</style>
</head>
<body>
<h1>Antimalware Report - $Action</h1>
<p>Generated on $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")</p>
"@
                
                # Convert to HTML and add custom header and footer
                $htmlBody = $Results | ConvertTo-Html -Fragment
                $htmlFooter = @"
<div class="footer">
    <p>Report generated by Manage-AntiMalware.ps1 version $($script:scriptVersion)</p>
    <p>Runtime: $([math]::Round(((Get-Date) - $script:startTime).TotalSeconds, 2)) seconds</p>
</div>
</body>
</html>
"@
                
                # Combine all HTML parts and save to file
                $htmlHeader + $htmlBody + $htmlFooter | Out-File -FilePath $outputFile -Force
                
                Write-Log "Results exported to HTML file: $outputFile" -Level Info
                return $outputFile
            }
            'JSON' {
                $outputFile = Join-Path -Path $Path -ChildPath "$filename.json"
                $Results | ConvertTo-Json -Depth 5 | Out-File -FilePath $outputFile -Force
                Write-Log "Results exported to JSON file: $outputFile" -Level Info
                return $outputFile
            }
            default {
                Write-Log "Invalid export format specified: $Format" -Level Error
                return $null
            }
        }
    }
    catch {
        Write-Log "Failed to export results to $Format file: $_" -Level Error
        return $null
    }
}

# Function to format and display results in console
function Format-ConsoleOutput {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [object[]]$Results,
        
        [Parameter(Mandatory=$true)]
        [string]$Action
    )
    
    Write-Host "`n===== Antimalware Management Results: $Action =====" -ForegroundColor Cyan
    Write-Host "Generated on: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')`n" -ForegroundColor Cyan
    
    foreach ($result in $Results) {
        Write-Host "Computer: $($result.ComputerName)" -ForegroundColor Green
        
        switch ($Action) {
            'GetStatus' {
                Write-Host "  Antimalware Status:" -ForegroundColor Yellow
                Write-Host "  - Antimalware Engine: $($result.AntiMalwareEngine)"
                Write-Host "  - Engine Version: $($result.

